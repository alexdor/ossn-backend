scalar EpochTime

type Announcement {
  id: ID!
  description: String
  sortDescription: String
  url: String
  imageUrl: String
  publishedAt: EpochTime
  createdAt: EpochTime!
  updatedAt: EpochTime!
}

type PageInfo {
  startCursor: ID!
  endCursor: ID!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Int!
}

type Club {
  id: ID!
  email: String
  location: Location
  name: String
  imageUrl: String
  description: String
  codeOfConduct: String
  sortDescription: String
  users: [UserWithRole]
  events: [Event]
  githubUrl: String
  clubUrl: String
  createdAt: EpochTime!
  updatedAt: EpochTime!
}

type ClubWithRole {
  id: ID!
  email: String
  location: Location
  name: String
  imageUrl: String
  description: String
  codeOfConduct: String
  sortDescription: String
  users: [User]
  events: [Event]
  role: RoleName
  githubUrl: String
  clubUrl: String
  createdAt: EpochTime!
  updatedAt: EpochTime!
}

type Event {
  id: ID!
  title: String!
  startDate: EpochTime
  endDate: EpochTime
  location: Location
  imageUrl: String
  description: String
  sortDescription: String
  club: Club
  publishedAt: EpochTime
  createdAt: EpochTime!
  updatedAt: EpochTime!
}

type Job {
  id: ID!
  description: String
  sortDescription: String
  url: String
  imageUrl: String
  publishedAt: EpochTime
  createdAt: EpochTime!
  updatedAt: EpochTime!
}

type Location {
  id: ID!
  address: String
  lat: String
  lng: String
  createdAt: EpochTime!
  updatedAt: EpochTime!
}

enum RoleName {
  admin
  member
  club_owner
  guest
  undefined
}

type User {
  id: ID!
  email: String!
  userName: String!
  firstName: String!
  lastName: String!
  imageUrl: String
  receiveNewsletter: Boolean
  description: String
  sortDescription: String
  clubs: [ClubWithRole]
  githubUrl: String
  personalUrl: String
  createdAt: EpochTime!
  updatedAt: EpochTime!
}

type UserWithRole {
  id: ID!
  email: String!
  userName: String!
  firstName: String!
  lastName: String!
  imageUrl: String
  receiveNewsletter: Boolean
  description: String
  sortDescription: String
  clubs: [ClubWithRole]
  githubUrl: String
  personalUrl: String
  createdAt: EpochTime!
  updatedAt: EpochTime!
  role: RoleName
}

interface WithPagination {
  pageInfo: PageInfo!
}

type Users implements WithPagination {
  users: [User!]
  pageInfo: PageInfo!
}

type Clubs implements WithPagination {
  clubs: [Club!]
  pageInfo: PageInfo!
}

type Events implements WithPagination {
  events: [Event!]
  pageInfo: PageInfo!
}

type Jobs implements WithPagination {
  jobs: [Job!]
  pageInfo: PageInfo!
}

type Announcements implements WithPagination {
  announcements: [Announcement!]
  pageInfo: PageInfo!
}

type Query {
  user(id: ID!): User
  users(first: Int = 10, before: ID, after: ID, search: String): Users
  clubs(
    first: Int = 10
    userID: ID
    ids: [ID]
    before: ID
    after: ID
    search: String
  ): Clubs
  club(id: ID!): Club
  events(first: Int = 10, clubId: ID, before: ID, after: ID): Events
  event(id: ID!): Event
  jobs(first: Int = 10, before: ID, after: ID): Jobs
  announcements(first: Int = 10, before: ID, after: ID): Announcements
}

input UserInput {
  email: String!
  password: String!
  userName: String!
  firstName: String!
  lastName: String!
  imageUrl: String!
  receiveNewsletter: Boolean!
  description: String
  sortDescription: String
  clubs: [ID!]
  githubUrl: String
  personalUrl: String
}
input ClubInput {
  email: String!
  location: LocationInput
  name: String!
  imageUrl: String
  description: String!
  codeOfConduct: String
  sortDescription: String
  users: [ID!]
  events: [ID!]
  githubUrl: String
  clubUrl: String
}

input LocationInput {
  id: ID
  address: String
  lat: String
  lng: String
}

type Mutation {
  createUser(input: UserInput!): User
  createClub(input: ClubInput!): Club
  createLocation(input: LocationInput): Location
}

schema {
  query: Query
  mutation: Mutation
}
